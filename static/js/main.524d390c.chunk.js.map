{"version":3,"sources":["Devices.js","SpectrumGraph.js","PieGraph.js","PieGraph2.js","App.js","serviceWorker.js","index.js"],"names":["Devices","devices","deselectDevice","selectDevice","deviceList","map","device","className","key","id","name","manufacturer","type","state","action","onClick","e","target","innerHTML","classList","toggle","handleClick","getValue","message","parseInt","getMidi","SpectrumGraph","props","div","ReactFauxDOM","Element","data","Array","from","messages","filter","color","d3","domain","d","margin","graphWidth","useState","window","innerWidth","width","setWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowWidth","graphHeight","height","x","range","y","xAxis","scale","yAxis","ticks","svg","append","attr","call","style","text","selectAll","enter","toReact","PieGraph","cent","ro","Math","min","pie","sort","value","console","log","arcPath","innerRadius","outerRadius","PieGraph2","App","initialTestMessages","Map","fill","_","i","setState","addMidiDevice","push","selected","selectedDevices","ele","midi","inputs","forEach","input","onmidimessage","onMIDIMessage","onMIDISuccess","midiAccess","listInputsAndOutputs","startLoggingMIDIInput","onMIDIFailure","msg","outputs","output","event","set","entry","navigator","requestMIDIAccess","sysex","then","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.524d390c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Devices.css';\r\n//function devices(props){\r\nfunction Devices({ devices, deselectDevice, selectDevice }) {\r\n\tfunction handleClick(e, device) {\r\n\t\tif (e.target.innerHTML === 'Mute') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Listen';\r\n\t\t\tdeselectDevice(device);\r\n\t\t} else if (e.target.innerHTML === 'Listen') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Mute';\r\n\t\t\tselectDevice(device);\r\n\t\t}\r\n\t}\r\n\tconst deviceList = devices.map((device) => {\r\n\t\treturn (\r\n\t\t\t<li className=\"collection-item row\" key={device.id}>\r\n\t\t\t\t<div className=\"col s3\">Name: {device.name}</div>\r\n\t\t\t\t<div className=\"col s3\">Manufacturer: {device.manufacturer} </div>\r\n\t\t\t\t<div className=\"col s2\">Type: {device.type}</div>\r\n\t\t\t\t<div className=\"col s2\">\r\n\t\t\t\t\tState: {device.state}, {device.action}\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"devices btn purple lighten-4\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\thandleClick(e, device);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tMute\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\r\n\treturn <ul className=\"collection\">{deviceList}</ul>;\r\n}\r\nexport default Devices;\r\n","import { useState, useEffect } from 'react';\r\nimport ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction useWindowWidth() {\r\n\tconst [ width, setWidth ] = useState(window.innerWidth);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => setWidth(window.innerWidth);\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('resize', handleResize);\r\n\t\t};\r\n\t});\r\n\treturn width;\r\n}\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction SpectrumGraph(props) {\r\n\tconst maxX = 12;\r\n\tconst maxY = 127;\r\n\r\n\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\t\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet1']);\r\n\tcolor.domain(data.map(d=> getMidi(d)));\r\n\r\n\tlet margin = { top: 20, right: 20, bottom: 30, left: 40 },\r\n\t\tgraphWidth = useWindowWidth() - 50 - margin.left - margin.right,\r\n\t\tgraphHeight = props.height - margin.top - margin.bottom;\r\n\r\n\tlet x = d3.scaleLinear().range([ 0, graphWidth ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tlet xAxis = d3.axisBottom().scale(x);\r\n\tlet yAxis = d3.axisLeft().scale(y).ticks(10);\r\n\r\n\t//Pass it to d3.select and proceed as normal\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr('width', graphWidth + margin.left + margin.right)\r\n\t\t.attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n\tx.domain([ 0, maxX ]);\r\n\ty.domain([ 0, maxY ]);\r\n\r\n\tsvg.append('g').attr('class', 'x axis').attr('transform', `translate(0,${graphHeight})`).call(xAxis);\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('class', 'y axis')\r\n\t\t.call(yAxis)\r\n\t\t.append('text')\r\n\t\t.attr('transform', 'rotate(-90)')\r\n\t\t.attr('y', 10)\r\n\t\t.attr('dy', '.71em')\r\n\t\t.style('text-anchor', 'end')\r\n\t\t.text('Frequency');\r\n\r\n\tsvg\r\n\t\t.selectAll('.bar')\r\n\t\t.data(data)\r\n\t\t.enter()\r\n\t\t.append('rect')\r\n\t\t.attr('class', 'bar')\r\n\t\t.attr('fill', (d) => color(getMidi(d)))\r\n\t\t.attr('x', (d) => x(getMidi(d)))\r\n\t\t.attr('width', graphWidth / maxX)\r\n\t\t.attr('y', (d) => y(getValue(d)))\r\n\t\t.attr('value', getValue)\r\n\t\t.attr('height', (d) => graphHeight - y(getValue(d)));\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default SpectrumGraph;\r\n","import { useState, useEffect } from 'react';\r\nimport ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction useWindowWidth() {\r\n\tconst [ width, setWidth ] = useState(window.innerWidth);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => setWidth(window.innerWidth);\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('resize', handleResize);\r\n\t\t};\r\n\t});\r\n\treturn width;\r\n}\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction PieGraph(props) {\r\n\tconst maxX = 12;\r\n\tconst maxY = 127;\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet1']);\r\n\tcolor.domain(data.map((d) => getMidi(d)));\r\n\r\n\tconst margin = { top: 20, right: 20, bottom: 20, left: 20 },\r\n\t\tgraphWidth = useWindowWidth() - 50 - margin.left - margin.right,\r\n\t\tgraphHeight = graphWidth - margin.top - margin.bottom;\r\n\r\n\tconst cent = { x: graphWidth / 2 + 5, y: graphHeight / 2 + 5 };\r\n\r\n\tlet ro = d3.scaleLinear().range([ 0, graphWidth / 2 ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tro.domain([ 0, Math.min(cent.x,cent.y) ]);\r\n\ty.domain([ 0, maxY ]);\r\n\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr('width', graphWidth + margin.left + margin.right)\r\n\t\t.attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${cent.x},${cent.y})`);\r\n\r\n\tconst pie = d3.pie().sort(null).value((e) => {\r\n\t\treturn getValue(e);\r\n\t});\r\n\tconsole.log('data', data);\r\n\tconsole.log('pie', pie(data));\r\n\tconst arcPath = d3.arc().innerRadius(0).outerRadius((e) => {\r\n\t\tconsole.log('ro', e);\r\n\t\treturn ro(e.value);\r\n\t});\r\n\tconst paths = svg.selectAll('path').data(pie(data));\r\n\tpaths\r\n\t\t.enter()\r\n\t\t.append('path')\r\n\t\t.attr('class', 'arc')\r\n\t\t.attr('fill', (d) => color(getMidi(d.data)))\r\n\t\t.attr('d', (d) => {\r\n\t\t\tconsole.log('d', d);\r\n\t\t\t// console.log('data', d.data);\r\n\t\t\treturn arcPath(d);\r\n\t\t})\r\n\t\t.attr('stroke', '#fff')\r\n\t\t.attr('stroke-width', 3);\r\n\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default PieGraph;\r\n","import { useState, useEffect } from 'react';\r\nimport ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction useWindowWidth() {\r\n\tconst [ width, setWidth ] = useState(window.innerWidth);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => setWidth(window.innerWidth);\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('resize', handleResize);\r\n\t\t};\r\n\t});\r\n\treturn width;\r\n}\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction PieGraph2(props) {\r\n\tconst maxX = 12;\r\n\tconst maxY = 127;\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet1']);\r\n\tcolor.domain(data.map((d) => getMidi(d)));\r\n\r\n\tconst margin = { top: 20, right: 20, bottom: 20, left: 20 },\r\n\t\tgraphWidth = useWindowWidth() - 50 - margin.left - margin.right,\r\n\t\tgraphHeight = graphWidth - margin.top - margin.bottom;\r\n\r\n\tconst cent = { x: graphWidth / 2 + 5, y: graphHeight / 2 + 5 };\r\n\r\n\tlet ro = d3.scaleLinear().range([ 0, graphWidth / 2 ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tro.domain([ 0, Math.min(cent.x,cent.y) ]);\r\n\ty.domain([ 0, maxY ]);\r\n\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr('width', graphWidth + margin.left + margin.right)\r\n\t\t.attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${cent.x},${cent.y})`);\r\n\r\n\tconst pie = d3.pie().sort(null).value((e) => {\r\n\t\t// return getValue(e);\r\n\t\treturn (12);\r\n\t})\r\n\tconsole.log('data', data);\r\n\tconsole.log('pie', pie(data));\r\n\tconst arcPath = d3.arc().innerRadius(0).outerRadius((e) => {\r\n\t\tconsole.log('ro', e);\r\n\t\treturn ro(getValue(e.data));\r\n\t});\r\n\tconst paths = svg.selectAll('path').data(pie(data));\r\n\tpaths\r\n\t\t.enter()\r\n\t\t.append('path')\r\n\t\t.attr('class', 'arc')\r\n\t\t.attr('fill', (d) => color(getMidi(d.data)))\r\n\t\t.attr('d', (d) => {\r\n\t\t\tconsole.log('d', d);\r\n\t\t\t// console.log('data', d.data);\r\n\t\t\treturn arcPath(d);\r\n\t\t})\r\n\t\t.attr('stroke', '#fff')\r\n\t\t.attr('stroke-width', 3);\r\n\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default PieGraph2;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Devices from './Devices';\nimport SpectrumGraph from './SpectrumGraph';\nimport PieGraph from './PieGraph';\nimport PieGraph2 from './PieGraph2';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdevices: [],\n\t\t\tselectedDevices: [],\n\t\t\tmessages: new Map([])\n\t\t};\n\t}\n\n\tinitialTestMessages = () => {\n\t\tlet messages = new Map(Array(128).fill().map((_, i) => {\n\t\t\treturn [ i, i ] ;\n\t\t}));\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\taddMidiDevice = (device) => {\n\t\t// we copy the array and alter the copy\n\t\tvar devices = this.state.devices;\n\t\tdevices.push(device);\n\t\t// we set the new array as state\n\t\tthis.setState({\n\t\t\tdevices: devices\n\t\t});\n\t\t//console.log(ninja);\n\t};\n\tdeselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected = selected.filter(function(ele) {\n\t\t\treturn ele !== device;\n\t\t});\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = null;\n\t\t\t\tinput.action = 'not listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\n\tselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected.push(device);\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = this.onMIDIMessage;\n\t\t\t\tinput.action = 'listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\tcomponentDidMount() {\n\t\t// this.initialTestMessages();\n\t\tnavigator.requestMIDIAccess({ sysex: true }).then(this.onMIDISuccess, this.onMIDIFailure);\n\t}\n\t//componentDidUpdate(prevProps, prevState) {}\n\tonMIDISuccess = (midiAccess) => {\n\t\tconsole.log('MIDI ready!');\n\t\tconsole.log(midiAccess);\n\n\t\tthis.setState({\n\t\t\tmidi: midiAccess\n\t\t});\n\t\t// midi = midiAccess;  // store in the global (in real usage, would probably keep in an object instance)\n\t\tthis.listInputsAndOutputs(midiAccess);\n\t\tthis.startLoggingMIDIInput(midiAccess);\n\t};\n\n\tonMIDIFailure = (msg) => {\n\t\tconsole.log('Failed to get MIDI access - ' + msg);\n\t};\n\n\tlistInputsAndOutputs = (midiAccess) => {\n\t\tconsole.log('MIDI INPUTS');\n\t\tmidiAccess.inputs.forEach((input) => {\n\t\t\tthis.addMidiDevice(input);\n\t\t\tthis.selectDevice(input);\n\t\t});\n\t\tconsole.log('MIDI OUTPUTS');\n\t\tmidiAccess.outputs.forEach(function(output) {});\n\t};\n\n\tonMIDIMessage = (event) => {\n\t\tlet messages = this.state.messages;\n\t\tmessages.set(event.data[1], event.data[2]);\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\tstartLoggingMIDIInput = (midiAccess) => {\n\t\tmidiAccess.inputs.forEach((entry) => {\n\t\t\tentry.onmidimessage = this.onMIDIMessage;\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h2 className=\"card-panel white accent-4 lighten-2\">Midi Visuals</h2>\n\t\t\t\t<Devices\n\t\t\t\t\tdevices={this.state.devices}\n\t\t\t\t\tdeselectDevice={this.deselectDevice}\n\t\t\t\t\tselectDevice={this.selectDevice}\n\t\t\t\t/>\n\t\t\t\t<div id=\"graph-container\" className=\"card-panel white s lighten-2\">\n\t\t\t\t\t<SpectrumGraph messages={this.state.messages}  height=\"400\" />\n\t\t\t\t</div>\n\t\t\t\t<div id=\"graph-container\" className=\"card-panel white s lighten-2 row\">\n\t\t\t\t\t<PieGraph messages={this.state.messages}  width=\"400\" height=\"400\" />\n\t\t\t\t</div>\t\n\t\t\t\t<div id=\"graph-container\" className=\"card-panel white s lighten-2 row\">\n\t\t\t\t\t<PieGraph2 messages={this.state.messages}  width=\"400\" height=\"400\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}