{"version":3,"sources":["components/Devices.js","components/SpectrumGraph.js","components/DoughnutGraph.js","components/PieGraph.js","components/Home.js","components/Chromas.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Devices","devices","deselectDevice","selectDevice","deviceList","map","device","className","key","id","name","manufacturer","type","state","action","onClick","e","target","innerHTML","classList","toggle","handleClick","getValue","message","parseInt","getMidi","SpectrumGraph","props","maxX","n_notes","div","ReactFauxDOM","Element","data","Array","from","messages","filter","color","d3","domain","d","margin","graphWidth","width","graphHeight","height","x","range","y","labels","xAxis","scale","tickFormat","ticks","svg","append","attr","call","selectAll","enter","toReact","DoughnutGraph","cent","ro","Math","min","pie","sort","value","arcPath","innerRadius","outerRadius","PieGraph","Home","initialTestMessages","Map","fill","_","i","setState","addMidiDevice","push","selected","selectedDevices","ele","midi","inputs","forEach","input","onmidimessage","onMIDIMessage","onMIDISuccess","midiAccess","console","log","listInputsAndOutputs","startLoggingMIDIInput","onMIDIFailure","msg","outputs","output","event","set","entry","this","navigator","requestMIDIAccess","sysex","then","Component","Chromas","selectChromas","onChange","handleChange","withRouter","to","exact","App","routes","path","component","render","window","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7a6095b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Devices.css';\r\n//function devices(props){\r\nfunction Devices({ devices, deselectDevice, selectDevice }) {\r\n\tfunction handleClick(e, device) {\r\n\t\tif (e.target.innerHTML === 'Mute') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Listen';\r\n\t\t\tdeselectDevice(device);\r\n\t\t} else if (e.target.innerHTML === 'Listen') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Mute';\r\n\t\t\tselectDevice(device);\r\n\t\t}\r\n\t}\r\n\tconst deviceList = devices.map((device) => {\r\n\t\treturn (\r\n\t\t\t<li className=\"collection-item grey-text black row\" key={device.id}>\r\n\t\t\t\t<div className=\"col s2\">Device Name: {device.name}</div>\r\n\t\t\t\t<div className=\"col s3\">Manufacturer: {device.manufacturer} </div>\r\n\t\t\t\t<div className=\"col s1\">Type: {device.type}</div>\r\n\t\t\t\t<div className=\"col s3\">\r\n\t\t\t\t\tState: {device.state}, {device.action}\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"col offset-s2 s1 devices btn purple lighten-4\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\thandleClick(e, device);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tMute\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\r\n\treturn <ul className=\"collection\">{deviceList}</ul>;\r\n}\r\nexport default Devices;\r\n","import ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction SpectrumGraph(props) {\r\n\tconst maxX = props.n_notes;\r\n\tconst maxY = 127;\r\n\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet3']);\r\n\tcolor.domain(data.map((d) => getMidi(d)));\r\n\r\n\tlet margin = { top: 20, right: 40, bottom: 30, left: 40 },\r\n\t\tgraphWidth = props.width - margin.left - margin.right,\r\n\t\tgraphHeight = props.height - margin.top - margin.bottom;\r\n\r\n\tlet x = d3.scaleLinear().range([ 0, graphWidth ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tlet labels = [ 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B' ];\r\n\tlet xAxis = d3.axisBottom().scale(x).tickFormat((d) => labels[d%12]).ticks(24);\r\n\t// let yAxis = d3.axisLeft().scale(y).ticks(4);\r\n\r\n\t//Pass it to d3.select and proceed as normal\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr('preserveAspectRatio', 'xMinYMin meet')\r\n\t\t.attr('viewBox', '0 0 ' + props.width + ' ' + props.height)\r\n\t\t// .attr('width', graphWidth + margin.left + margin.right)\r\n\t\t// .attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n\tx.domain([ 0, maxX ]);\r\n\ty.domain([ 0, maxY ]);\r\n\tlet xAxisRepr = svg\r\n\t\t.append('g')\r\n\t\t.attr('class', 'x axis')\r\n\t\t.attr('transform', `translate(${graphHeight / 20},${graphHeight})`)\r\n\t\t.call(xAxis);\r\n\r\n\txAxisRepr.selectAll(\"text\").attr(\"fill\",(d)=>color(d)).attr(\"stroke\",(d)=>color(d));\r\n\r\n\t// svg.append('g').attr('class', 'y axis').call(yAxis);\r\n\r\n\tsvg\r\n\t\t.selectAll('.bar')\r\n\t\t.data(data)\r\n\t\t.enter()\r\n\t\t.append('rect')\r\n\t\t.attr('class', 'bar')\r\n\t\t.attr('fill', (d) => color(getMidi(d)))\r\n\t\t.attr('x', (d) => x(getMidi(d)))\r\n\t\t.attr('width', graphWidth / maxX)\r\n\t\t.attr('y', (d) => y(getValue(d)))\r\n\t\t.attr('value', getValue)\r\n\t\t.attr('height', (d) => graphHeight - y(getValue(d)));\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default SpectrumGraph;\r\n","import ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction DoughnutGraph(props) {\r\n\tconst maxX = props.n_notes;\r\n\tconst maxY = 127;\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet3']);\r\n\tcolor.domain(data.map((d) => getMidi(d)));\r\n\r\n\tconst margin = { top: 20, right: 20, bottom: 20, left: 20 },\r\n\t\tgraphWidth = props.width - 50 - margin.left - margin.right,\r\n\t\tgraphHeight = props.height - margin.top - margin.bottom;\r\n\r\n\tconst cent = { x: graphWidth / 2 + 5, y: graphHeight / 2 + 5 };\r\n\r\n\tlet ro = d3.scaleLinear().range([ 0, (graphWidth / 2)-50 ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tro.domain([ 0, Math.min(cent.x, cent.y) ]);\r\n\ty.domain([ 0, maxY ]);\r\n\r\n\tlet svg = d3\r\n\t\t.select(div)   \r\n\t\t.append('svg')\r\n\t\t.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n\t\t.attr(\"viewBox\", \"0 0 \"+graphWidth+\" \"+graphHeight)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${cent.x},${cent.y})`);\r\n\r\n\tconst pie = d3.pie().sort(null).value((e) => getValue(e));\r\n\tconst arcPath = d3.arc().innerRadius(50).outerRadius((e) => 50+ro(e.value));\r\n\tconst paths = svg.selectAll('path').data(pie(data));\r\n\tpaths\r\n\t\t.enter()\r\n\t\t.append('path')\r\n\t\t.attr('class', 'arc')\r\n\t\t.attr('fill', (d) => color(getMidi(d.data)))\r\n\t\t.attr('d', (d) => arcPath(d))\r\n\t\t.attr('stroke', 'black')\r\n\t\t.attr('stroke-width', 3);\r\n\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default DoughnutGraph;\r\n","import ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction PieGraph(props) {\r\n\tconst maxX = props.n_notes;\r\n\tconst maxY = 127;\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\r\n\tlet data = Array.from(props.messages).filter((e) => getMidi(e) < maxX);\r\n\r\n\tconst color = d3.scaleOrdinal(d3['schemeSet3']);\r\n\tcolor.domain(data.map((d) => getMidi(d)));\r\n\r\n\tconst margin = { top: 20, right: 20, bottom: 20, left: 20 },\r\n\t\tgraphWidth = props.width - 50 - margin.left - margin.right,\r\n\t\tgraphHeight = props.height - margin.top - margin.bottom;\r\n\r\n\tconst cent = { x: graphWidth / 2 + 5, y: graphHeight / 2 + 5 };\r\n\r\n\tlet ro = d3.scaleLinear().range([ 0, graphWidth / 2 ]);\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tro.domain([ 0, Math.min(cent.x, cent.y) ]);\r\n\ty.domain([ 0, maxY ]);\r\n\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n\t\t.attr(\"viewBox\", \"0 0 \"+graphWidth+\" \"+graphHeight)\r\n\t\t// .attr('width', graphWidth + margin.left + margin.right)\r\n\t\t// .attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${cent.x},${cent.y})`);\r\n\r\n\tconst pie = d3.pie().sort(null).value((e) => 12);\r\n\tconst arcPath = d3.arc().innerRadius(0).outerRadius((e) => ro(getValue(e.data)));\r\n\tconst paths = svg.selectAll('path').data(pie(data));\r\n\tpaths\r\n\t\t.enter()\r\n\t\t.append('path')\r\n\t\t.attr('class', 'arc')\r\n\t\t.attr('fill', (d) => color(getMidi(d.data)))\r\n\t\t.attr('d', (d) => arcPath(d))\r\n\t\t.attr('stroke', 'black')\r\n\t\t.attr('stroke-width', 3);\r\n\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default PieGraph;\r\n","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport Devices from './Devices';\r\nimport SpectrumGraph from './SpectrumGraph';\r\nimport DoughnutGraph from './DoughnutGraph';\r\nimport PieGraph from './PieGraph';\r\n\r\nclass Home extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdevices: [],\r\n\t\t\tselectedDevices: [],\r\n\t\t\tmessages: new Map([])\r\n\t\t};\r\n\t}\r\n\r\n\tinitialTestMessages = () => {\r\n\t\tlet messages = new Map(\r\n\t\t\tArray(128).fill().map((_, i) => {\r\n\t\t\t\treturn [ i, 0 ];\r\n\t\t\t})\r\n\t\t);\r\n\t\tthis.setState({\r\n\t\t\tmessages: messages\r\n\t\t});\r\n\t};\r\n\r\n\taddMidiDevice = (device) => {\r\n\t\t// we copy the array and alter the copy\r\n\t\tvar devices = this.state.devices;\r\n\t\tdevices.push(device);\r\n\t\t// we set the new array as state\r\n\t\tthis.setState({\r\n\t\t\tdevices: devices\r\n\t\t});\r\n\t\t//console.log(ninja);\r\n\t};\r\n\tdeselectDevice = (device) => {\r\n\t\tlet selected = this.state.selectedDevices;\r\n\t\tselected = selected.filter(function(ele) {\r\n\t\t\treturn ele !== device;\r\n\t\t});\r\n\t\tthis.state.midi.inputs.forEach((input) => {\r\n\t\t\tif (input === device) {\r\n\t\t\t\tinput.onmidimessage = null;\r\n\t\t\t\tinput.action = 'not listening';\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tselectedDevices: selected\r\n\t\t});\r\n\t};\r\n\r\n\tselectDevice = (device) => {\r\n\t\tlet selected = this.state.selectedDevices;\r\n\t\tselected.push(device);\r\n\t\tthis.state.midi.inputs.forEach((input) => {\r\n\t\t\tif (input === device) {\r\n\t\t\t\tinput.onmidimessage = this.onMIDIMessage;\r\n\t\t\t\tinput.action = 'listening';\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tselectedDevices: selected\r\n\t\t});\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tthis.initialTestMessages();\r\n\t\tnavigator.requestMIDIAccess({ sysex: true }).then(this.onMIDISuccess, this.onMIDIFailure);\r\n\t}\r\n\t//componentDidUpdate(prevProps, prevState) {}\r\n\tonMIDISuccess = (midiAccess) => {\r\n\t\tconsole.log('MIDI ready!');\r\n\t\tconsole.log(midiAccess);\r\n\r\n\t\tthis.setState({\r\n\t\t\tmidi: midiAccess\r\n\t\t});\r\n\t\t// midi = midiAccess;  // store in the global (in real usage, would probably keep in an object instance)\r\n\t\tthis.listInputsAndOutputs(midiAccess);\r\n\t\tthis.startLoggingMIDIInput(midiAccess);\r\n\t};\r\n\r\n\tonMIDIFailure = (msg) => {\r\n\t\tconsole.log('Failed to get MIDI access - ' + msg);\r\n\t};\r\n\r\n\tlistInputsAndOutputs = (midiAccess) => {\r\n\t\tconsole.log('MIDI INPUTS');\r\n\t\tmidiAccess.inputs.forEach((input) => {\r\n\t\t\tthis.addMidiDevice(input);\r\n\t\t\tthis.selectDevice(input);\r\n\t\t});\r\n\t\tconsole.log('MIDI OUTPUTS');\r\n\t\tmidiAccess.outputs.forEach(function(output) {});\r\n\t};\r\n\r\n\tonMIDIMessage = (event) => {\r\n\t\tlet messages = this.state.messages;\r\n\t\tmessages.set(event.data[1], event.data[2]);\r\n\t\tthis.setState({\r\n\t\t\tmessages: messages\r\n\t\t});\r\n\t};\r\n\r\n\tstartLoggingMIDIInput = (midiAccess) => {\r\n\t\tmidiAccess.inputs.forEach((entry) => {\r\n\t\t\tentry.onmidimessage = this.onMIDIMessage;\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Devices\r\n\t\t\t\t\tdevices={this.state.devices}\r\n\t\t\t\t\tdeselectDevice={this.deselectDevice}\r\n\t\t\t\t\tselectDevice={this.selectDevice}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div id=\"graph-container\" className=\"card-panel black lighten-2 row\">\r\n\t\t\t\t\t<div className=\"col s12 m5\">\r\n\t\t\t\t\t\t<SpectrumGraph\r\n\t\t\t\t\t\t\tn_notes={this.props.n_notes}\r\n\t\t\t\t\t\t\tmessages={this.state.messages}\r\n\t\t\t\t\t\t\twidth=\"600\"\r\n\t\t\t\t\t\t\theight=\"400\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col s12 m7\">\r\n\t\t\t\t\t\t<div className=\"col s12 m6\">\r\n\t\t\t\t\t\t\t<DoughnutGraph\r\n\t\t\t\t\t\t\t\tn_notes={this.props.n_notes}\r\n\t\t\t\t\t\t\t\tmessages={this.state.messages}\r\n\t\t\t\t\t\t\t\twidth=\"400\"\r\n\t\t\t\t\t\t\t\theight=\"370\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col s12 m6\">\r\n\t\t\t\t\t\t\t<PieGraph\r\n\t\t\t\t\t\t\t\tn_notes={this.props.n_notes}\r\n\t\t\t\t\t\t\t\tmessages={this.state.messages}\r\n\t\t\t\t\t\t\t\twidth=\"400\"\r\n\t\t\t\t\t\t\t\theight=\"370\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './Devices.css';\r\n//function devices(props){\r\nfunction Chromas({ selectChromas }) {\r\n\tfunction handleChange(e) {\r\n        selectChromas(e.target.value);\r\n\t\t\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"col s12\">\r\n\t\t\t<select onChange={(e) => handleChange(e)}>\r\n\t\t\t\t<option value=\"12\">12 notes</option>\r\n\t\t\t\t<option value=\"24\">24 notes</option>\r\n\t\t\t\t<option value=\"36\">36 notes</option>\r\n\t\t\t\t<option value=\"48\">48 notes</option>\r\n\t\t\t\t<option value=\"60\">60 notes</option>\r\n\t\t\t\t<option value=\"72\">72 notes</option>\r\n\t\t\t\t<option value=\"84\">84 notes</option>\r\n\t\t\t\t<option value=\"96\">96 notes</option>\r\n\t\t\t\t<option value=\"108\">108 notes</option>\r\n\t\t\t\t<option value=\"120\">120 notes</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Chromas;\r\n","import React from 'react';\r\nimport { Link, NavLink, withRouter } from 'react-router-dom';\r\nimport Chromas from './Chromas';\r\nfunction Navbar(props) {\r\n\t// setTimeout(()=>{\r\n\t//     props.history.push('/about')\r\n\t// },2000)\r\n\treturn (\r\n\t\t<nav className=\"nav-wrapper blue-grey darken-4\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Link to=\"/\" className=\"left brand-logo\">\r\n\t\t\t\t\tMidi Visuals\r\n\t\t\t\t</Link>\r\n\t\t\t\t<ul className=\"right\">\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink exact to=\"/\">\r\n\t\t\t\t\t\t\tHome\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"/bar\">Bar Chart</NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"/doughnut\">Doughnut Chart</NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"/pie\">Pie Chart</NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<Chromas selectChromas={props.selectChromas}/>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t);\r\n}\r\nexport default withRouter(Navbar);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport SpectrumGraph from './components/SpectrumGraph';\nimport DoughnutGraph from './components/DoughnutGraph';\nimport Navbar from './components/Navbar';\nimport { HashRouter, Route } from 'react-router-dom';\nimport PieGraph from './components/PieGraph';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tn_notes: 12,\n\t\t\tdevices: [],\n\t\t\tselectedDevices: [],\n\t\t\tmessages: new Map([])\n\t\t};\n\t}\n\n\tinitialTestMessages = () => {\n\t\tlet messages = new Map(\n\t\t\tArray(128).fill().map((_, i) => {\n\t\t\t\treturn [ i, 0 ];\n\t\t\t})\n\t\t);\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\taddMidiDevice = (device) => {\n\t\t// we copy the array and alter the copy\n\t\tvar devices = this.state.devices;\n\t\tdevices.push(device);\n\t\t// we set the new array as state\n\t\tthis.setState({\n\t\t\tdevices: devices\n\t\t});\n\t\t//console.log(ninja);\n\t};\n\tdeselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected = selected.filter(function(ele) {\n\t\t\treturn ele !== device;\n\t\t});\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = null;\n\t\t\t\tinput.action = 'not listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\n\tselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected.push(device);\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = this.onMIDIMessage;\n\t\t\t\tinput.action = 'listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\tcomponentDidMount() {\n\t\tthis.initialTestMessages();\n\t\tnavigator.requestMIDIAccess({ sysex: true }).then(this.onMIDISuccess, this.onMIDIFailure);\n\t}\n\t//componentDidUpdate(prevProps, prevState) {}\n\tonMIDISuccess = (midiAccess) => {\n\t\tconsole.log('MIDI ready!');\n\t\tconsole.log(midiAccess);\n\n\t\tthis.setState({\n\t\t\tmidi: midiAccess\n\t\t});\n\t\t// midi = midiAccess;  // store in the global (in real usage, would probably keep in an object instance)\n\t\tthis.listInputsAndOutputs(midiAccess);\n\t\tthis.startLoggingMIDIInput(midiAccess);\n\t};\n\n\tonMIDIFailure = (msg) => {\n\t\tconsole.log('Failed to get MIDI access - ' + msg);\n\t};\n\n\tlistInputsAndOutputs = (midiAccess) => {\n\t\tconsole.log('MIDI INPUTS');\n\t\tmidiAccess.inputs.forEach((input) => {\n\t\t\tthis.addMidiDevice(input);\n\t\t\tthis.selectDevice(input);\n\t\t});\n\t\tconsole.log('MIDI OUTPUTS');\n\t\tmidiAccess.outputs.forEach(function(output) {});\n\t};\n\n\tonMIDIMessage = (event) => {\n\t\tlet messages = this.state.messages;\n\t\tmessages.set(event.data[1], event.data[2]);\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\tstartLoggingMIDIInput = (midiAccess) => {\n\t\tmidiAccess.inputs.forEach((entry) => {\n\t\t\tentry.onmidimessage = this.onMIDIMessage;\n\t\t});\n\t};\n\troutes = [ { path: '/', component: 'Home' } ];\n\tselectChromas = (n_notes) => {\n\t\tthis.setState({\n\t\t\tn_notes: n_notes,\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Navbar selectChromas={this.selectChromas} />\n\t\t\t\t\t{/* Exact attribute to match the precise url */}\n\t\t\t\t\t<Route exact path=\"/\" render={(props) => <Home {...props} n_notes={this.state.n_notes} />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/doughnut\"\n\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t<DoughnutGraph\n\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\tn_notes={this.state.n_notes}\n\t\t\t\t\t\t\t\tmessages={this.state.messages}\n\t\t\t\t\t\t\t\twidth={window.innerWidth}\n\t\t\t\t\t\t\t\theight={window.innerHeight - 100}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/pie\"\n\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t<PieGraph\n\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\tn_notes={this.state.n_notes}\n\t\t\t\t\t\t\t\tmessages={this.state.messages}\n\t\t\t\t\t\t\t\twidth={window.innerWidth}\n\t\t\t\t\t\t\t\theight={window.innerHeight - 100}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/bar\"\n\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t<SpectrumGraph\n\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\tn_notes={this.state.n_notes}\n\t\t\t\t\t\t\t\tmessages={this.state.messages}\n\t\t\t\t\t\t\t\twidth={window.innerWidth}\n\t\t\t\t\t\t\t\theight={window.innerHeight - 100}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}