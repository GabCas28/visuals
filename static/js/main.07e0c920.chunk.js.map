{"version":3,"sources":["Devices.js","SpectrumGraph.js","App.js","serviceWorker.js","index.js"],"names":["Devices","devices","deselectDevice","selectDevice","deviceList","map","device","className","key","id","name","manufacturer","type","state","action","onClick","e","target","innerHTML","classList","toggle","handleClick","getValue","message","parseInt","SpectrumGraph","props","div","ReactFauxDOM","Element","data","Array","from","messages","margin","graphWidth","useState","window","innerWidth","width","setWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowWidth","graphHeight","height","x","d3","range","y","xAxis","scale","yAxis","ticks","svg","append","attr","domain","call","style","text","selectAll","enter","d","toReact","App","initialTestMessages","fill","_","i","setState","addMidiDevice","push","selected","selectedDevices","filter","ele","midi","inputs","forEach","input","onmidimessage","onMIDIMessage","onMIDISuccess","midiAccess","console","log","listInputsAndOutputs","startLoggingMIDIInput","onMIDIFailure","msg","outputs","output","event","set","entry","getWidth","Map","navigator","requestMIDIAccess","sysex","then","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.07e0c920.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Devices.css';\r\n//function devices(props){\r\nfunction Devices({ devices, deselectDevice, selectDevice }) {\r\n\tfunction handleClick(e, device) {\r\n\t\tif (e.target.innerHTML === 'Mute') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Listen';\r\n\t\t\tdeselectDevice(device);\r\n\t\t} else if (e.target.innerHTML === 'Listen') {\r\n\t\t\te.target.classList.toggle('green');\r\n\t\t\te.target.innerHTML = 'Mute';\r\n\t\t\tselectDevice(device);\r\n\t\t}\r\n\t}\r\n\tconst deviceList = devices.map((device) => {\r\n\t\treturn (\r\n\t\t\t<li className=\"collection-item row\" key={device.id}>\r\n\t\t\t\t<div className=\"col s3\">Name: {device.name}</div>\r\n\t\t\t\t<div className=\"col s3\">Manufacturer: {device.manufacturer} </div>\r\n\t\t\t\t<div className=\"col s2\">Type: {device.type}</div>\r\n\t\t\t\t<div className=\"col s2\">\r\n\t\t\t\t\tState: {device.state}, {device.action}\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"devices btn purple lighten-4\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\thandleClick(e, device);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tMute\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\r\n\treturn <ul className=\"collection\">{deviceList}</ul>;\r\n}\r\nexport default Devices;\r\n","import { useState, useEffect } from 'react';\r\nimport ReactFauxDOM from 'react-faux-dom';\r\nimport './SpectrumGraph.css';\r\nimport * as d3 from 'd3';\r\n\r\nfunction useWindowWidth() {\r\n\tconst [ width, setWidth ] = useState(window.innerWidth);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => setWidth(window.innerWidth);\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('resize', handleResize);\r\n\t\t};\r\n\t});\r\n\treturn width;\r\n}\r\n\r\nfunction getValue(message) {\r\n\treturn parseInt(message[1]);\r\n}\r\nfunction getMidi(message) {\r\n\treturn parseInt(message[0]);\r\n}\r\n\r\nfunction SpectrumGraph(props) {\r\n\tlet div = new ReactFauxDOM.Element('div');\r\n\tlet data = Array.from(props.messages);\r\n\tlet margin = { top: 20, right: 20, bottom: 30, left: 40 },\r\n\t\tgraphWidth = useWindowWidth() -50 - margin.left - margin.right,\r\n\t\tgraphHeight = props.height - margin.top - margin.bottom;\r\n\r\n\tlet x = d3.scaleLinear().range([ 0, graphWidth ]);\r\n\r\n\tlet y = d3.scaleLinear().range([ graphHeight, 0 ]);\r\n\r\n\tlet xAxis = d3.axisBottom().scale(x);\r\n\r\n\tlet yAxis = d3.axisLeft().scale(y).ticks(10);\r\n\r\n\t//Pass it to d3.select and proceed as normal\r\n\tlet svg = d3\r\n\t\t.select(div)\r\n\t\t.append('svg')\r\n\t\t.attr('width', graphWidth + margin.left + margin.right)\r\n\t\t.attr('height', graphHeight + margin.top + margin.bottom)\r\n\t\t.append('g')\r\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n\tx.domain([ 0, 127 ]);\r\n\ty.domain([ 0, 127 ]);\r\n\r\n\tsvg.append('g').attr('class', 'x axis').attr('transform', `translate(0,${graphHeight})`).call(xAxis);\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('class', 'y axis')\r\n\t\t.call(yAxis)\r\n\t\t.append('text')\r\n\t\t.attr('transform', 'rotate(-90)')\r\n\t\t.attr('y', 10)\r\n\t\t.attr('dy', '.71em')\r\n\t\t.style('text-anchor', 'end')\r\n\t\t.text('Frequency');\r\n\r\n\tsvg\r\n\t\t.selectAll('.bar')\r\n\t\t.data(data)\r\n\t\t.enter()\r\n\t\t.append('rect')\r\n\t\t.attr('class', 'bar')\r\n\t\t.attr('x', (d) => x(getMidi(d)))\r\n\t\t.attr('width', graphWidth / 127)\r\n\t\t.attr('y', (d) => y(getValue(d)))\r\n\t\t.attr('value', getValue)\r\n\t\t.attr('height', (d) => graphHeight - y(getValue(d)));\r\n\treturn div.toReact();\r\n}\r\n\r\nexport default SpectrumGraph;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Devices from './Devices';\nimport SpectrumGraph from './SpectrumGraph';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdevices: [],\n\t\t\tselectedDevices: [],\n\t\t\tmessages: new Map([])\n\t\t};\n\t}\n\n\tinitialTestMessages = () => {\n\t\tlet messages = Array(128).fill().map((_, i) => {\n\t\t\treturn { data: [ 0, i, i ] };\n\t\t});\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\taddMidiDevice = (device) => {\n\t\t// we copy the array and alter the copy\n\t\tvar devices = this.state.devices;\n\t\tdevices.push(device);\n\t\t// we set the new array as state\n\t\tthis.setState({\n\t\t\tdevices: devices\n\t\t});\n\t\t//console.log(ninja);\n\t};\n\tdeselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected = selected.filter(function(ele) {\n\t\t\treturn ele !== device;\n\t\t});\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = null;\n\t\t\t\tinput.action = 'not listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\n\tselectDevice = (device) => {\n\t\tlet selected = this.state.selectedDevices;\n\t\tselected.push(device);\n\t\tthis.state.midi.inputs.forEach((input) => {\n\t\t\tif (input === device) {\n\t\t\t\tinput.onmidimessage = this.onMIDIMessage;\n\t\t\t\tinput.action = 'listening';\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tselectedDevices: selected\n\t\t});\n\t};\n\tcomponentDidMount() {\n\t\t// this.initialTestMessages();\n\t\tnavigator.requestMIDIAccess({ sysex: true }).then(this.onMIDISuccess, this.onMIDIFailure);\n\t}\n\t//componentDidUpdate(prevProps, prevState) {}\n\tonMIDISuccess = (midiAccess) => {\n\t\tconsole.log('MIDI ready!');\n\t\tconsole.log(midiAccess);\n\n\t\tthis.setState({\n\t\t\tmidi: midiAccess\n\t\t});\n\t\t// midi = midiAccess;  // store in the global (in real usage, would probably keep in an object instance)\n\t\tthis.listInputsAndOutputs(midiAccess);\n\t\tthis.startLoggingMIDIInput(midiAccess);\n\t};\n\n\tonMIDIFailure = (msg) => {\n\t\tconsole.log('Failed to get MIDI access - ' + msg);\n\t};\n\n\tlistInputsAndOutputs = (midiAccess) => {\n\t\tconsole.log('MIDI INPUTS');\n\t\tmidiAccess.inputs.forEach((input) => {\n\t\t\tthis.addMidiDevice(input);\n\t\t\tthis.selectDevice(input);\n\t\t});\n\t\tconsole.log('MIDI OUTPUTS');\n\t\tmidiAccess.outputs.forEach(function(output) {});\n\t};\n\n\tonMIDIMessage = (event) => {\n\t\tlet messages = this.state.messages;\n\t\tmessages.set(event.data[1], event.data[2]);\n\t\tthis.setState({\n\t\t\tmessages: messages\n\t\t});\n\t};\n\n\tstartLoggingMIDIInput = (midiAccess) => {\n\t\tmidiAccess.inputs.forEach((entry) => {\n\t\t\tentry.onmidimessage = this.onMIDIMessage;\n\t\t});\n\t};\n\tgetWidth = () => {\n\t\treturn 600;\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h2 className=\"card-panel white accent-4 lighten-2\">Midi Visuals</h2>\n\t\t\t\t<Devices\n\t\t\t\t\tdevices={this.state.devices}\n\t\t\t\t\tdeselectDevice={this.deselectDevice}\n\t\t\t\t\tselectDevice={this.selectDevice}\n\t\t\t\t/>\n\t\t\t\t<div id=\"graph-container\" className=\"card-panel white s lighten-2\">\n\t\t\t\t\t<SpectrumGraph messages={this.state.messages} width={this.getWidth()} height=\"300\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}